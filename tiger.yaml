# tiger-pure config

# 说明
# xform --改寫〔不保留原形〕
# derive --衍生〔保留原形〕
# abbrev --簡拼〔出字優先級較上兩組更低〕
# fuzz --畧拼〔此種簡拼僅組詞，不出單字〕
# xlit --變換〔適合大量一對一變換〕
# erase --刪除
algebra:
  core:
    __append:
      - derive|^(\w)(\w)\[(\w)(\w)$|$1$2$3$4|     # 匹配4码
      - derive|^(\w)(\w)\[(\w)(\d)$|$1$2$3|       # 匹配3码
      - derive|^(\w)(\w)\[(\d)(\d)$|$1$2|         # 匹配2码
      - derive|^(\w)(\d)\[(\d)(\d)$|$1|           # 匹配1码
  erase:
    __append:
      - erase|^(\w+)\[(\w+)$|                     # 刪除原始編碼以加速檢索

switches_engine_table:
  switches:
    __include: switches_list
  engine:
    processors:
      - ascii_composer                              # 处理英文模式及中英文切换
      - recognizer                                  # 与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等
      - key_binder                                  # 在特定条件下将按键绑定到其他按键，如重定义逗号、句号为候选翻页键
      - speller                                     # 把字母追加到编码串
      - punctuator                                  # 处理符号按键
      - selector                                    # 选字和换页功能
      - navigator                                   # 移动插入点
      - express_editor                              # 空格确认当前输入，其他字符直接上屏
    segmentors:
      - ascii_segmentor
      - matcher
      - abc_segmentor                               # 标记输入码的类型
      - punct_segmentor                             # 割界，与前后方的其他编码区分开
      - fallback_segmentor
    translators:
      - punct_translator                            # 转换标点符号
      - reverse_lookup_translator                   # 拼音反查
      - table_translator                            # 码表转换
      - table_translator@fast_symbol                # 码表转换-快符
      - history_translator@input_history            # 输入历史
    filters:
      - lua_filter@*charset_filter                  # 字集过滤
      - simplifier@s2t                              # 简繁滤镜
      - uniquifier                                  # 过滤重复的候选字，可能来自简繁转换

switches_engine_script:
  switches:
    __include: switches_list
  engine:
    processors:
      - ascii_composer                              # 处理英文模式及中英文切换
      - recognizer                                  # 与 matcher 搭配，处理符合特定规则的输入码，如网址、反查等
      - key_binder                                  # 在特定条件下将按键绑定到其他按键，如重定义逗号、句号为候选翻页键
      - speller                                     # 把字母追加到编码串
      - punctuator                                  # 处理符号按键
      - selector                                    # 选字和换页功能
      - navigator                                   # 移动插入点
      - express_editor                              # 空格确认当前输入，其他字符直接上屏
    segmentors:
      - ascii_segmentor
      - matcher
      - abc_segmentor                               # 标记输入码的类型
      - punct_segmentor                             # 割界，与前后方的其他编码区分开
      - fallback_segmentor
    translators:
      - punct_translator                            # 转换标点符号
      - reverse_lookup_translator                   # 拼音反查
      - table_translator@fast_symbol                # 码表转换-快符
      - script_translator                           # 码表转换
      - history_translator@input_history            # 输入历史
    filters:
      - lua_filter@*charset_filter                  # 字集过滤
      - simplifier@s2t                              # 简繁滤镜
      - uniquifier                                  # 过滤重复的候选字，可能来自简繁转换

keys:
  page_up_down:
    __append:
      - { when: paging, accept: bracketleft, send: Page_Up }      # [ 后翻
      - { when: has_menu, accept: bracketright, send: Page_Down } # ] 前翻
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }
      - { when: has_menu, accept: KP_Enter, send: Return }  #小键盘回车字母上屏
  selector:
    __append:
      - { when: has_menu, accept: semicolon, send: 2 }  # 分号次选
      - { when: has_menu, accept: apostrophe, send: 3 } # 引号三选
      - { when: composing, accept: Tab, send: Escape }  # tab清屏
  options_toggle:
    __append:
      - { when: composing, accept: "Control+b", toggle: extended_char }      # 字集滤镜
      - { when: composing, accept: "Control+o", toggle: traditionalization } # 简繁滤镜

dict_All_false:
  enable_user_dict: false
  enable_charset_filter: false
  enable_encoder: false
  enable_sentence: false
  encode_commit_history: false
  enable_completion: false

fast_symbol_translator:
  fast_symbol:
    dictionary: fast_symbol
    __include: dict_All_false

reverse_lookup_translator:
  reverse_lookup:
    dictionary: pinyin
    prefix: "`"
    tips: "〔拼音〕"
    preedit_format:
      - "xform/([nl])v/$1ü/"
      - "xform/([nl])ue/$1üe/"
      - "xform/([jqxy])v/$1u/"
    comment_format:
      - xform|^||
      - xform|0||
      - xform|[[]||

s2t_filter:
  s2t:
    opencc_config: filter_s2t/st_tu.json
    option_name: traditionalization
    tips: all

history_filter:
  input_history:
    input: 'z'
    size: 1
    initial_quality: 0

switches_list:
  - name: ascii_mode
    reset: 0
    states: [ 虎, 英 ]
  - name: extended_char
    states: [ 全字集, 常用字 ]
  - name: traditionalization
    states: [ 简, 繁 ]
  - name: full_shape
    reset: 0
    states: [ 半角, 全角 ]
  - name: ascii_punct
    reset: 0
    states: [ 。，, ．， ]

punctuator:
  full_shape:
    ' ' : { commit: '　' }
    ',' : { commit: ， }
    '.' : { commit: 。 }
    '<' : [ 《, 〈, «, ‹ ]
    '>' : [ 》, 〉, », › ]
    '/' : [ ／, ÷ ]
    '?' : { commit: ？ }
    ';' : { commit: ； }
    ':' : { commit: ： }
    '''' : { pair: [ '‘', '’' ] }
    '"' : { pair: [ '“', '”' ] }
    '\' : 、 #[ 、, ＼ ]
    '|' : [ ｜, ·, '§', '¦' ]
    '`' : ｀
    #'~' : ～
    '!' : { commit: ！ }
    '@' : ＠ #[ ＠, ☯ ]
    '#' : ＃ #[ ＃, ⌘ ]
    #'%' : [ ％, '°', '℃' ]
    #'$' : [ ￥, '$', '€', '£', '¥', '¢', '¤', ₩ ]
    '$' : { commit: ￥ }
    '^' : { commit: …… }
    '&' : ＆
    '*' : ＊ #[ ＊, ·, ・, ×, ※, ❂ ]
    '(' : （
    ')' : ）
    '-' : －
    '_' : _
    '+' : ＋
    #'=' : [ ＝, 々, 〃 ]
    '[' : [ 【, 〔, 「, ［ ] #, 〚, 〘
    ']' : [ 】, 〕, 」, ］] #, 〛, 〙
    '{' : [ "{", 〖, 『 , ｛ ]
    '}' : [ "}", 〗, 』 , ｝ ]
  half_shape:
    ',' : { commit: ， }
    '.' : { commit: . }
    '<' : [ 《, 〈, «, ‹, ˂, ˱ ]
    '>' : [ 》, 〉, », ›, ˃, ˲ ]
    '/' : [ '/', ÷ ]
    '?' : { commit: ？ }
    ';' : { commit: ； }
    ':' : { commit: ： }
    '''' : { pair: [ '‘', '’' ] }
    '"' : { pair: [ '“', '”' ] }
    '\' : { commit: 、 } #[ 、, '\', ＼ ]
    '|' : [ '|', ·, '·' , ｜, '§', '¦', '‖', ︴ ]
    #'`' : [ '`', ·, ‵, ‶, ‷, ′, ″, ‴, ⁗ ]
    #'~' : [ '~', ～, ˜, ˷, ⸯ, ≈, ≋, ≃, ≅, ≇, ∽, ⋍, ≌, ﹏, ﹋, ﹌, ︴ ]
    '!' : { commit: ！ }
    '@' : '@' #[ '@', ©, ®, ℗ ]
    '#' : '#' #[ '#', № ]
    #'%' : [ '%', ％, '°', '℃', ‰, ‱, ℉, ℅, ℆, ℀, ℁, ⅍ ]
    #'$' : [ ￥, '$', '€', '£', '¥', '¢', '¤', ₩ ]
    '$' : { commit: ￥ }
    '^' : { commit: …… }
    '&' : '&'
    '*' : '*' #[ '*', ＊, ·, ‧, ・, ･, ×, ※, ❂, ⁂, ☮, ☯, ☣ ]
    '(' : （
    ')' : ）
    '-' : '-'
    '_' : _
    '+' : '+'
    #'=' : [ '=', 々, 〃 ]
    '[' : 【 #[ 【, 〔, 「, ［ ] #, 〚, 〘
    ']' : 】 #[ 】, 〕, 」, ］] #, 〛, 〙
    '{' : [ "{", 〖, 『 , ｛ ]
    '}' : [ "}", 〗, 』 , ｝ ]
  symbols:
    '/im' : [ '[IMPORTANT]' ]    
    '/wa' : [ '[WARNING]' ]    
    '/ti' : [ '[TIP]' ]    
    '/no' : [ '[NOTE]' ]    
    '/ca' : [ '[CAUTION]' ]    
    '/qa' : [ '[qanda]' ]    
    '/sm' : [ '[.small]##' ]    
    '/bi' : [ '[.big]##' ]    
    '/lt' : [ '[.line-through]##' ]    
    '/ul' : [ '[.underline]##' ]    
    '/ol' : [ '[overline]##' ]    
    '/yl' : [ '[yellow]##' ]    
    '/rl' : [ '[red yellow-background]##' ]    
    '/le' : [ '[.lead]' ]    
    '/xx' : [ '****' ]    
    '/ms' : [ ' :: ' ]    
     
 
